# Copyright 2021 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.

appName=cds-file-upload

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"

# A utility that runs registerd routines on application startup
play.modules.enabled += "uk.gov.hmrc.exports.routines.RoutineRunnerModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="oLlK4UWFSZCTh2i4MIVkrDosVHVDmMNT8ysMWCHOhIFzGnfxrh4AnZOuDYLCtm9T"

# Session configuration
application.session.httpOnly=false
application.session.secure=false

# The application languages

# Router
play.http.router=prod.Routes

json.encryption {
    key="eTRDaFlxN01vM3BiUHhtNw=="
    previousKeys=[]
}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = false
    enabled = true
}

# Microservice specific config

auditing {
    enabled=true
    traceRequests=true
    consumer {
        baseUri {
            host = localhost
            port = 8100
        }
    }
}

mongodb {
    uri = "mongodb://localhost:27017/cds-file-upload"
    encryption-enabled = true
    ttl = 28d
}

microservice {
    metrics {
        graphite {
            host = graphite
            port = 2003
            prefix = play.${appName}.
            enabled = false
        }
    }

    services {
        auth {
            host=localhost
            port=8500
        }

    }
}

notifications {
  ttl-seconds = 3600
}

contexts {
    routines-dispatcher {
        fork-join-executor {
            parallelism-min = 2
            parallalism-factor = 2.0
            parallelism-max = 20
        }
    }
}
